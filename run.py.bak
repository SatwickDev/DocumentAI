#!/usr/bin/env python3
"""
MCP Document Processing System - Main Runner
Standardized entry point for all services and utilities
"""

import os
import sys
import argparse
import subprocess
from pathlib import Path
import time

# Add src to Python path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

def start_classification_service(port=8001):
    """Start the classification microservice"""
    print(f"🚀 Starting Classification Service on port {port}...")
    print(f"   🌐 URL: http://localhost:{port}")
    print(f"   📖 Docs: http://localhost:{port}/docs")
    print()
    
    # Run the service using module path
    subprocess.run([
        sys.executable, "-m", "src.microservices.classification_service"
    ])

def start_quality_service(port=8002):
    """Start the quality analysis microservice"""
    print(f"🚀 Starting Quality Analysis Service on port {port}...")
    print(f"   🌐 URL: http://localhost:{port}")
    print(f"   📖 Docs: http://localhost:{port}/docs")
    print()
    
    # Run the service using module path
    subprocess.run([
        sys.executable, "-m", "src.microservices.quality_service"
    ])

def start_api_gateway(port=8000):
    """Start the API Gateway"""
    print(f"🚀 Starting API Gateway on port {port}...")
    print(f"   🌐 URL: http://localhost:{port}")
    print(f"   📖 Docs: http://localhost:{port}/docs")
    print()
    
    # Run the API gateway using module path
    subprocess.run([
        sys.executable, "-m", "src.microservices.api_gateway"
    ])

def start_mcp_orchestrator():
    """Start the MCP Orchestrator"""
    print(f"🚀 Starting MCP Orchestrator...")
    
    # Run the orchestrator using module path
    subprocess.run([
        sys.executable, "-m", "src.utils.mcp_orchestrator"
    ])

def start_notification_service():
    """Start the Notification Service"""
    print(f"🚀 Starting Notification Service...")
    
    # Run the service using module path
    subprocess.run([
        sys.executable, "-m", "src.microservices.notification_service"
    ])

def start_frontend():
    """Start a simple HTTP server for the frontend"""
    frontend_path = Path(__file__).parent / "frontend"
    
    print("🚀 Starting Frontend Server...")
    print(f"   📁 Path: {frontend_path}")
    print("   🌐 URL: http://localhost:8080")
    print()
    
    # Change to the frontend directory
    os.chdir(frontend_path)
    
    # Start a simple HTTP server
    subprocess.run([
        sys.executable, "-m", "http.server", "8080"
    ])

def start_mcp_server(server_type="classification"):
    """Start an MCP server"""
    print(f"🚀 Starting {server_type.title()} MCP Server...")
    
    if server_type.lower() == "classification":
        # Run the classification MCP server
        subprocess.run([
            sys.executable, "-m", "src.mcp_servers.classification_mcp_server"
        ])
    elif server_type.lower() == "quality":
        # Run the quality MCP server
        subprocess.run([
            sys.executable, "-m", "src.mcp_servers.quality_mcp_server"
        ])
    else:
        print(f"❌ Unknown server type: {server_type}")
        print("   Supported types: classification, quality")
    
    # Run the MCP server
    subprocess.run([
        sys.executable, str(server_path)
    ])
    """Start an MCP server directly"""
    if server_type == "classification":
        server_path = Path(__file__).parent / "src" / "mcp_servers" / "classification_mcp_server.py"
    elif server_type == "quality":
        server_path = Path(__file__).parent / "src" / "mcp_servers" / "quality_mcp_server.py"
    else:
        print(f"❌ Unknown server type: {server_type}")
        return
    
    print(f"🚀 Starting {server_type.title()} MCP Server...")
    print(f"   📁 Server: {server_path}")
    print(f"   🔗 Protocol: JSON-RPC 2.0 over STDIO")
    print()
    
    # Run the MCP server
    subprocess.run([
        sys.executable, str(server_path)
    ])

def show_project_structure():
    """Show the current project structure"""
    print("📁 MCP Document Processing System - Project Structure")
    print("=" * 60)
    
    def print_tree(path, prefix="", max_depth=3, current_depth=0):
        if current_depth > max_depth:
            return
            
        items = []
        try:
            items = list(path.iterdir())
            items.sort(key=lambda x: (x.is_file(), x.name.lower()))
        except PermissionError:
            return
        
        for i, item in enumerate(items):
            if item.name.startswith('.') or item.name == '__pycache__':
                continue
                
            is_last = i == len(items) - 1
            current_prefix = "└── " if is_last else "├── "
            print(f"{prefix}{current_prefix}{item.name}")
            
            if item.is_dir() and current_depth < max_depth:
                next_prefix = prefix + ("    " if is_last else "│   ")
                print_tree(item, next_prefix, max_depth, current_depth + 1)
    
    project_root = Path(__file__).parent
    print_tree(project_root)

def main():
    """Main entry point"""
    parser = argparse.ArgumentParser(
        description="MCP Document Processing System",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  python run.py service              # Start classification service
  python run.py gateway              # Start API gateway  
  python run.py frontend             # Start web frontend
  python run.py mcp classification   # Start classification MCP server
  python run.py mcp quality          # Start quality MCP server
  python run.py structure            # Show project structure
        """
    )
    
    parser.add_argument(
        'command', 
        choices=['service', 'gateway', 'mcp', 'frontend', 'structure'],
        help='Command to run'
    )
    
    parser.add_argument(
        'subcommand',
        nargs='?',
        choices=['classification', 'quality'],
        help='Subcommand for MCP server type'
    )
    
    parser.add_argument(
        '--port', '-p',
        type=int,
        help='Port number (default: 8001 for service, 8000 for gateway)'
    )
    
    args = parser.parse_args()
    
    print("🎯 MCP Document Processing System v2.0")
    print("=" * 50)
    
    if args.command == 'service':
        port = args.port or 8001
        start_classification_service(port)
    
    elif args.command == 'gateway':
        port = args.port or 8000
        start_api_gateway(port)
    
    elif args.command == 'frontend':
        port = args.port or 3000
        start_frontend_server(port)
    
    elif args.command == 'mcp':
        if not args.subcommand:
            print("❌ MCP server type required: classification or quality")
            return
        start_mcp_server(args.subcommand)
    
    elif args.command == 'structure':
        show_project_structure()

if __name__ == "__main__":
    main()
